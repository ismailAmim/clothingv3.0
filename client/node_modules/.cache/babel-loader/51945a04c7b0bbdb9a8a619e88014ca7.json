{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drh\\\\clothingv3.0\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect'; //import 'firebase/firestore';\n//import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\nimport CollectionPageContainer from '../collection/collection.container'; //import CollectionPage from '../collection/collection.component';\n//import {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\n/* import { selectIsCollectionFetching, \r\n        selectIsCollectionLoaded} from \"../../redux/shop/shop.selectors\";\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n */\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n//const CollectionPageWithSpinner      = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  /* state = {\r\n    loading : true\r\n  };\r\n    unsubscribeFromSnapshot = null; */\n  componentDidMount() {\n    // distruct the props to dispatch funct --fetchCollectionsStartAsync()\n    // then  we call the funct\n    const fetchCollectionsStartAsync = this.props.fetchCollectionsStartAsync;\n    fetchCollectionsStartAsync();\n    /* const {updateCollections} = this.props;\r\n    // fetcihing for the collection ref\r\n    const collectionRef =firestore.collection('collections');\r\n    \r\n      collectionRef.get().then(async snapshot=> {\r\n        const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n        updateCollections(collectionsMap);\r\n        this.setState({loading : false}); \r\n      }); */\n    // get the snapShot collection    \n\n    /* collectionRef.onSnapshot(async snapshot=> {\r\n      const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n      updateCollections(collectionsMap);\r\n      this.setState({loading : false});\r\n    });\r\n       */\n\n    /* \r\n    // using fetch function for promise pattern \r\n    // unnecesserly nested objects\r\n    // a lot of works\r\n    fetch('https://firestore.googleapis.com/v1/projects/crown-98d7f/databases/(default)/documents/collections')\r\n    .then(response => response.json())\r\n    .then(collections => console.log(collections)); */\n  }\n\n  render() {\n    const match = this.props.match; //const {loading} = this.state;\n\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`\n      /*  render={(props)=>(<CollectionsOverviewWithSpinner isLoading ={isCollectionFetching}{...props}/>)} */\n      ,\n      component: CollectionsOverviewContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId`\n      /*  render={(props)=>(<CollectionPageWithSpinner isLoading ={!isCollectionLoaded}{...props}/>)}  */\n      ,\n      component: CollectionPageContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({//isCollectionFetching : selectIsCollectionFetching,\n  //isCollectionLoaded   : selectIsCollectionLoaded\n});\n\nconst mapDispacthToProps = dispatch => ({\n  //updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispacthToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/drh/clothingv3.0/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStartAsync","ShopPage","Component","componentDidMount","props","render","match","path","mapStateToProps","mapDispacthToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,wBAAR,QAAuC,UAAvC,C,CACC;AACD;;AACA,OAAOC,4BAAP,MAAyC,qEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC,C,CAEA;AACA;;AACA,SAAQC,0BAAR,QACgB,+BADhB;AAEA;;;;;AAKA;AACA;;AAEA,MAAOC,QAAP,SAAwBP,KAAK,CAACQ,SAA9B,CAAuC;AAErC;;;;AAMAC,EAAAA,iBAAiB,GAAE;AAEjB;AACA;AAHiB,UAIVH,0BAJU,GAIoB,KAAKI,KAJzB,CAIVJ,0BAJU;AAKjBA,IAAAA,0BAA0B;AAC1B;;;;;;;;;AAUA;;AACA;;;;;;;AAOE;;;;;;;AAOH;;AAEFK,EAAAA,MAAM,GAAE;AAAA,UAECC,KAFD,GAEuD,KAAKF,KAF5D,CAECE,KAFD,EAGN;;AACA,WACF;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMD,oBAAC,KAAD;AACO,MAAA,KAAK,MADZ;AACa,MAAA,IAAI,EAAG,GAAEA,KAAK,CAACC,IAAK;AAC3B;AAFN;AAGM,MAAA,SAAS,EAAGT,4BAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANC,EAUD,oBAAC,KAAD;AACM,MAAA,IAAI,EAAG,GAAEQ,KAAK,CAACC,IAAK;AACpB;AAFN;AAGM,MAAA,SAAS,EAAGR,uBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVC,CADE;AAiBF;;AA9DsC;;AAkEvC,MAAMS,eAAe,GAAGX,wBAAwB,CAAC,CACjD;AACA;AAFiD,CAAD,CAAhD;;AAKA,MAAOY,kBAAkB,GAAGC,QAAQ,KAAK;AACvC;AACAV,EAAAA,0BAA0B,EAAG,MAAIU,QAAQ,CAACV,0BAA0B,EAA3B;AAFF,CAAL,CAApC;;AAKA,eAAeJ,OAAO,CAACY,eAAD,EAAiBC,kBAAjB,CAAP,CAA4CR,QAA5C,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\n //import 'firebase/firestore';\r\n//import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\n\r\n//import CollectionPage from '../collection/collection.component';\r\n//import {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {fetchCollectionsStartAsync\r\n         } from \"../../redux/shop/shop.actions\";\r\n/* import { selectIsCollectionFetching, \r\n        selectIsCollectionLoaded} from \"../../redux/shop/shop.selectors\";\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n */\r\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\n//const CollectionPageWithSpinner      = WithSpinner(CollectionPage);\r\n\r\nclass  ShopPage extends React.Component{\r\n\r\n  /* state = {\r\n    loading : true\r\n  };\r\n\r\n  unsubscribeFromSnapshot = null; */\r\n\r\n  componentDidMount(){\r\n\r\n    // distruct the props to dispatch funct --fetchCollectionsStartAsync()\r\n    // then  we call the funct\r\n    const {fetchCollectionsStartAsync} = this.props;\r\n    fetchCollectionsStartAsync();\r\n    /* const {updateCollections} = this.props;\r\n    // fetcihing for the collection ref\r\n    const collectionRef =firestore.collection('collections');\r\n    \r\n      collectionRef.get().then(async snapshot=> {\r\n        const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n        updateCollections(collectionsMap);\r\n        this.setState({loading : false}); \r\n      }); */\r\n        \r\n    // get the snapShot collection    \r\n    /* collectionRef.onSnapshot(async snapshot=> {\r\n      const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n      updateCollections(collectionsMap);\r\n      this.setState({loading : false});\r\n    });\r\n       */\r\n\r\n      /* \r\n      // using fetch function for promise pattern \r\n      // unnecesserly nested objects\r\n      // a lot of works\r\n      fetch('https://firestore.googleapis.com/v1/projects/crown-98d7f/databases/(default)/documents/collections')\r\n      .then(response => response.json())\r\n      .then(collections => console.log(collections)); */\r\n  };\r\n\r\n render(){\r\n   \r\n   const {match/* ,isCollectionFetching ,isCollectionLoaded*/} =this.props;\r\n   //const {loading} = this.state;\r\n   return(\r\n <div className='shop-page'>\r\n  { /*  <Route exact path={`${match.path}`} component={CollectionsOverview} />\r\n    <Route path={`${match.path}/:collectionId`} component={CollectionPage} />\r\n   */}\r\n {/* <Route exact path={`${match.path}`} render={(props)=>(<CollectionsOverviewWithSpinner isLoading ={loading}{...props}/>)} />\r\n <Route path={`${match.path}/:collectionId`} render={(props)=>(<CollectionPageWithSpinner isLoading ={loading}{...props}/>)} /> */}\r\n<Route \r\n       exact path={`${match.path}`} \r\n      /*  render={(props)=>(<CollectionsOverviewWithSpinner isLoading ={isCollectionFetching}{...props}/>)} */ \r\n      component ={CollectionsOverviewContainer}/>\r\n<Route \r\n      path={`${match.path}/:collectionId`} \r\n      /*  render={(props)=>(<CollectionPageWithSpinner isLoading ={!isCollectionLoaded}{...props}/>)}  */\r\n      component ={CollectionPageContainer}/>\r\n</div>\r\n);\r\n};\r\n}\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n//isCollectionFetching : selectIsCollectionFetching,\r\n//isCollectionLoaded   : selectIsCollectionLoaded\r\n});\r\n\r\nconst  mapDispacthToProps = dispatch => ({\r\n  //updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n  fetchCollectionsStartAsync : ()=>dispatch(fetchCollectionsStartAsync())\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispacthToProps)(ShopPage);\r\n"]},"metadata":{},"sourceType":"module"}