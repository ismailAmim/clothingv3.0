{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n/* export const updateCollections = (collectionsMap)=>({\r\ntype        : ShopActionTypes.UPDATE_COLLECTIONS,\r\npayload     : collectionsMap\r\n}); */\n// We shoul convert action objects to action functions\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // the async actiion creator \n// the benefits of using thunk\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections'); // action-start the moment the funct is called\n\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\nexport const updateCollections = collectionsMap => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS,\n  payload: collectionsMap\n});","map":{"version":3,"sources":["C:/Users/drh/clothingv3.0/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message","updateCollections","UPDATE_COLLECTIONS"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAkBC,+BAAlB,QAAyD,+BAAzD;AACA;;;;AAKA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAK;AAC1CC,EAAAA,IAAI,EAAUJ,eAAe,CAACK;AADY,CAAL,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAG;AACxDH,EAAAA,IAAI,EAAUJ,eAAe,CAACQ,yBAD0B;AAExDC,EAAAA,OAAO,EAAOF;AAF0C,CAAH,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAG;AACtDP,EAAAA,IAAI,EAAUJ,eAAe,CAACY,yBADwB;AAEtDH,EAAAA,OAAO,EAAOE;AAFwC,CAAH,CAA5C,C,CAKP;AACA;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAI;AAC1C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAEd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAArB,CADe,CAEf;;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAY,IAAAA,aAAa,CAACE,GAAd,GACCC,IADD,CACM,MAAMC,QAAN,IAAiB;AACnB,YAAMZ,cAAc,GAAEL,+BAA+B,CAACiB,QAAD,CAArD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACH,KAJD,EAKCa,KALD,CAKQC,KAAK,IAAIP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CALzB;AAMH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMC,iBAAiB,GAAIhB,cAAD,KAAmB;AACpDH,EAAAA,IAAI,EAAUJ,eAAe,CAACwB,kBADsB;AAEpDf,EAAAA,OAAO,EAAOF;AAFsC,CAAnB,CAA1B","sourcesContent":["import ShopActionTypes from './shop.types';\r\nimport {firestore,convertCollectionsSnapshotToMap}  from '../../firebase/firebase.utils';\r\n/* export const updateCollections = (collectionsMap)=>({\r\ntype        : ShopActionTypes.UPDATE_COLLECTIONS,\r\npayload     : collectionsMap\r\n}); */\r\n\r\n// We shoul convert action objects to action functions\r\nexport const fetchCollectionsStart = ()=>({\r\ntype        : ShopActionTypes.FETCH_COLLECTIONS_START,\r\n     });\r\n\r\nexport const fetchCollectionsSuccess = collectionsMap=>({\r\ntype        : ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\npayload     : collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = errorMessage=>({\r\ntype        : ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\npayload     : errorMessage\r\n    });\r\n        \r\n// the async actiion creator \r\n// the benefits of using thunk\r\nexport const fetchCollectionsStartAsync = ()=>{\r\n    return dispatch => {\r\n        const collectionRef =firestore.collection('collections');\r\n        // action-start the moment the funct is called\r\n        dispatch(fetchCollectionsStart());\r\n\r\n        collectionRef.get()\r\n        .then(async snapshot=> {\r\n            const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n            dispatch(fetchCollectionsSuccess(collectionsMap)); \r\n        })\r\n        .catch (error => dispatch(fetchCollectionsFailure(error.message))); \r\n    }\r\n};\r\n\r\nexport const updateCollections = (collectionsMap)=>({\r\ntype        : ShopActionTypes.UPDATE_COLLECTIONS,\r\npayload     : collectionsMap\r\n            });"]},"metadata":{},"sourceType":"module"}