{"ast":null,"code":"import { takeLatest\n/* takeEvery */\n, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types'; // sagas generator function \n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections'); // getting snapshot of the yielded  collection \n\n    const snapshot = yield collectionRef.get(); // We use call effect to yield convertCollectionsSnapshotToMap funct\n    // in case when it takes much time\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // put in sagas in replace thunk /dispatch \n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n  /*  collectionRef.get()\r\n   .then(async snapshot=> {\r\n       const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n       dispatch(fetchCollectionsSuccess(collectionsMap)); \r\n   })\r\n   .catch (error => dispatch(fetchCollectionsFailure(error.message))); \r\n  */\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/drh/clothingv3.0/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA;AAAU;AAAlB,EAAmCC,IAAnC,EAAwCC,GAAxC,QAAkD,oBAAlD;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QACa,+BADb;AAGA,SAAQC,uBAAR,EACQC,uBADR,QAEa,gBAFb;AAIA,OAAOC,eAAP,MAA4B,cAA5B,C,CACA;;AACA,OAAO,UAAUC,qBAAV,GAAmC;AACtC,MAAI;AACA,UAAMC,aAAa,GAAIN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAvB,CADA,CAEA;;AACA,UAAMC,QAAQ,GAAS,MAAMF,aAAa,CAACG,GAAd,EAA7B,CAHA,CAIA;AACA;;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAiCO,QAAjC,CAAjC,CANA,CAOA;;AACA,UAAMT,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACH,GATD,CASE,OAAOC,KAAP,EAAc;AACZ,UAAMZ,GAAG,CAACI,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACE;;;;;;;;AAOF;AAEL,OAAO,UAAUC,qBAAV,GAAmC;AACtC,QAAMhB,UAAU,CACZO,eAAe,CAACU,uBADJ,EAEZT,qBAFY,CAAhB;AAIH","sourcesContent":["import {takeLatest/* takeEvery */, call,put} from 'redux-saga/effects';\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap} \r\n        from '../../firebase/firebase.utils';\r\n\r\nimport {fetchCollectionsSuccess,\r\n        fetchCollectionsFailure}\r\n        from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n// sagas generator function \r\nexport function* fetchCollectionsAsync () {\r\n    try {\r\n        const collectionRef  = firestore.collection('collections');\r\n        // getting snapshot of the yielded  collection \r\n        const snapshot       = yield collectionRef.get();\r\n        // We use call effect to yield convertCollectionsSnapshotToMap funct\r\n        // in case when it takes much time\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap,snapshot);\r\n        // put in sagas in replace thunk /dispatch \r\n        yield put(fetchCollectionsSuccess(collectionsMap));\r\n    } catch (error) {\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }\r\n       /*  collectionRef.get()\r\n        .then(async snapshot=> {\r\n            const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n            dispatch(fetchCollectionsSuccess(collectionsMap)); \r\n        })\r\n        .catch (error => dispatch(fetchCollectionsFailure(error.message))); \r\n    */\r\n    }\r\n\r\nexport function* fetchCollectionsStart () {\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}