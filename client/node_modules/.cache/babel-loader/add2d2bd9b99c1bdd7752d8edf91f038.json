{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drh\\\\projects\\\\clothingv3.0\\\\client\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { useEffect, lazy, Suspense } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux'; //import {createStructuredSelector} from 'reselect';\n//import 'firebase/firestore';\n//import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\n\n/* import CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\n */\n//import CollectionPage from '../collection/collection.component';\n//import {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\n//import {fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\n\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\n/* import { selectIsCollectionFetching, \r\n        selectIsCollectionLoaded} from \"../../redux/shop/shop.selectors\";\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n */\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n//const CollectionPageWithSpinner      = WithSpinner(CollectionPage);\n\nconst CollectionsOverviewContainer = lazy(() => import('../../components/collections-overview/collection-overview.container'));\nconst CollectionPageContainer = lazy(() => import('../collection/collection.container'));\n\nconst ShopPage = ({\n  fetchCollectionsStart,\n  match\n}) => {\n  /* class  ShopPage extends React.Component{\r\n  \r\n    */\n\n  /* state = {\r\n  loading : true\r\n  };\r\n  unsubscribeFromSnapshot = null; */\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]); //componentDidMount(){\n  // distruct the props to dispatch funct --fetchCollectionsStartAsync()\n  // then  we call the funct\n\n  /* const {fetchCollectionsStartAsync} = this.props;\r\n  fetchCollectionsStartAsync(); */\n\n  /*  const {fetchCollectionsStart} = this.props;\r\n   fetchCollectionsStart(); */\n\n  /* const {updateCollections} = this.props;\r\n  // fetcihing for the collection ref\r\n  const collectionRef =firestore.collection('collections');\r\n  \r\n    collectionRef.get().then(async snapshot=> {\r\n      const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n      updateCollections(collectionsMap);\r\n      this.setState({loading : false}); \r\n    }); */\n  // get the snapShot collection    \n\n  /* collectionRef.onSnapshot(async snapshot=> {\r\n    const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n    updateCollections(collectionsMap);\r\n    this.setState({loading : false});\r\n  });\r\n     */\n\n  /* \r\n  // using fetch function for promise pattern \r\n  // unnecesserly nested objects\r\n  // a lot of works\r\n  fetch('https://firestore.googleapis.com/v1/projects/crown-98d7f/databases/(default)/documents/collections')\r\n  .then(response => response.json())\r\n  .then(collections => console.log(collections)); */\n  //};\n  //render(){\n  // const {match/* ,isCollectionFetching ,isCollectionLoaded*/} =this.props;\n  //const {loading} = this.state;\n\n  return React.createElement(\"div\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`\n    /*  render={(props)=>(<CollectionsOverviewWithSpinner isLoading ={isCollectionFetching}{...props}/>)} */\n    ,\n    component: CollectionsOverviewContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: `${match.path}/:collectionId`\n    /*  render={(props)=>(<CollectionPageWithSpinner isLoading ={!isCollectionLoaded}{...props}/>)}  */\n    ,\n    component: CollectionPageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })); //};\n};\n/* const mapStateToProps = createStructuredSelector({\r\n//isCollectionFetching : selectIsCollectionFetching,\r\n//isCollectionLoaded   : selectIsCollectionLoaded\r\n});\r\n */\n\n\nconst mapDispacthToProps = dispatch => ({\n  //updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispacthToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/drh/projects/clothingv3.0/client/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","lazy","Suspense","Route","connect","fetchCollectionsStart","CollectionsOverviewContainer","CollectionPageContainer","ShopPage","match","path","mapDispacthToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,IAAzB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;AACC;AACD;;AAGA;;;AAKA;AACA;AACA;;AACA,SAAQC,qBAAR,QAAqC,+BAArC;AACA;;;;;AAKA;AACA;;AAEA,MAAMC,4BAA4B,GAAEL,IAAI,CAAC,MAAI,OAAO,qEAAP,CAAL,CAAxC;AACA,MAAMM,uBAAuB,GAAEN,IAAI,CAAC,MAAI,OAAO,oCAAP,CAAL,CAAnC;;AAGA,MAAMO,QAAQ,GAAE,CAAC;AAACH,EAAAA,qBAAD;AAAuBI,EAAAA;AAAvB,CAAD,KAAiC;AACjD;;;;AAEK;;;;AAKLT,EAAAA,SAAS,CAAC,MAAI;AACAK,IAAAA,qBAAqB;AACpB,GAFN,EAEO,CAACA,qBAAD,CAFP,CAAT,CARiD,CAW/C;AAEE;AACA;;AACA;;;AAED;;;AAEC;;;;;;;;;AAUA;;AACA;;;;;;;AAOE;;;;;;;AAOJ;AAED;AAEC;AACC;;AACD,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMJ,oBAAC,KAAD;AACO,IAAA,KAAK,MADZ;AACa,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK;AAC3B;AAFN;AAGM,IAAA,SAAS,EAAGJ,4BAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANI,EAUJ,oBAAC,KAAD;AACM,IAAA,IAAI,EAAG,GAAEG,KAAK,CAACC,IAAK;AACpB;AAFN;AAGM,IAAA,SAAS,EAAGH,uBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVI,CADF,CAlD+C,CAmEjD;AACC,CApED;AAuEA;;;;;;;AAKA,MAAOI,kBAAkB,GAAGC,QAAQ,KAAK;AACvC;AACAP,EAAAA,qBAAqB,EAAG,MAAIO,QAAQ,CAACP,qBAAqB,EAAtB;AAFG,CAAL,CAApC;;AAKA,eAAeD,OAAO,CAAC,IAAD,EAAMO,kBAAN,CAAP,CAAiCH,QAAjC,CAAf","sourcesContent":["import React,{useEffect, lazy, Suspense} from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n//import {createStructuredSelector} from 'reselect';\r\n //import 'firebase/firestore';\r\n//import CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\n\r\n\r\n/* import CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\n */\r\n\r\n\r\n//import CollectionPage from '../collection/collection.component';\r\n//import {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n//import {fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\r\nimport {fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\r\n/* import { selectIsCollectionFetching, \r\n        selectIsCollectionLoaded} from \"../../redux/shop/shop.selectors\";\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n */\r\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\n//const CollectionPageWithSpinner      = WithSpinner(CollectionPage);\r\n\r\nconst CollectionsOverviewContainer =lazy(()=>import('../../components/collections-overview/collection-overview.container'));\r\nconst CollectionPageContainer =lazy(()=>import('../collection/collection.container'));\r\n\r\n\r\nconst ShopPage =({fetchCollectionsStart,match})=>{\r\n/* class  ShopPage extends React.Component{\r\n\r\n  */ /* state = {\r\n    loading : true\r\n  };\r\n\r\n  unsubscribeFromSnapshot = null; */\r\nuseEffect(()=>{\r\n              fetchCollectionsStart()\r\n              },[fetchCollectionsStart]);\r\n  //componentDidMount(){\r\n\r\n    // distruct the props to dispatch funct --fetchCollectionsStartAsync()\r\n    // then  we call the funct\r\n    /* const {fetchCollectionsStartAsync} = this.props;\r\n    fetchCollectionsStartAsync(); */\r\n   /*  const {fetchCollectionsStart} = this.props;\r\n    fetchCollectionsStart(); */\r\n    /* const {updateCollections} = this.props;\r\n    // fetcihing for the collection ref\r\n    const collectionRef =firestore.collection('collections');\r\n    \r\n      collectionRef.get().then(async snapshot=> {\r\n        const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n        updateCollections(collectionsMap);\r\n        this.setState({loading : false}); \r\n      }); */\r\n        \r\n    // get the snapShot collection    \r\n    /* collectionRef.onSnapshot(async snapshot=> {\r\n      const collectionsMap =convertCollectionsSnapshotToMap(snapshot)\r\n      updateCollections(collectionsMap);\r\n      this.setState({loading : false});\r\n    });\r\n       */\r\n\r\n      /* \r\n      // using fetch function for promise pattern \r\n      // unnecesserly nested objects\r\n      // a lot of works\r\n      fetch('https://firestore.googleapis.com/v1/projects/crown-98d7f/databases/(default)/documents/collections')\r\n      .then(response => response.json())\r\n      .then(collections => console.log(collections)); */\r\n  //};\r\n\r\n //render(){\r\n   \r\n  // const {match/* ,isCollectionFetching ,isCollectionLoaded*/} =this.props;\r\n   //const {loading} = this.state;\r\n  return(\r\n    <div className='shop-page'>\r\n  { /*  <Route exact path={`${match.path}`} component={CollectionsOverview} />\r\n    <Route path={`${match.path}/:collectionId`} component={CollectionPage} />\r\n   */}\r\n {/* <Route exact path={`${match.path}`} render={(props)=>(<CollectionsOverviewWithSpinner isLoading ={loading}{...props}/>)} />\r\n <Route path={`${match.path}/:collectionId`} render={(props)=>(<CollectionPageWithSpinner isLoading ={loading}{...props}/>)} /> */}\r\n<Route \r\n       exact path={`${match.path}`} \r\n      /*  render={(props)=>(<CollectionsOverviewWithSpinner isLoading ={isCollectionFetching}{...props}/>)} */ \r\n      component ={CollectionsOverviewContainer}/>\r\n<Route \r\n      path={`${match.path}/:collectionId`} \r\n      /*  render={(props)=>(<CollectionPageWithSpinner isLoading ={!isCollectionLoaded}{...props}/>)}  */\r\n      component ={CollectionPageContainer}/>\r\n</div>\r\n);\r\n//};\r\n}\r\n\r\n\r\n/* const mapStateToProps = createStructuredSelector({\r\n//isCollectionFetching : selectIsCollectionFetching,\r\n//isCollectionLoaded   : selectIsCollectionLoaded\r\n});\r\n */\r\nconst  mapDispacthToProps = dispatch => ({\r\n  //updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n  fetchCollectionsStart : ()=>dispatch(fetchCollectionsStart())\r\n});\r\n\r\nexport default connect(null,mapDispacthToProps)(ShopPage);\r\n"]},"metadata":{},"sourceType":"module"}