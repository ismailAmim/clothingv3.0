{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\drh\\\\clothingv3.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDMkhuFQxRYLe41Qv-LG0RP454ssnxwVm0\",\n  authDomain: \"crown-98d7f.firebaseapp.com\",\n  databaseURL: \"https://crown-98d7f.firebaseio.com\",\n  projectId: \"crown-98d7f\",\n  storageBucket: \"crown-98d7f.appspot.com\",\n  messagingSenderId: \"509021124659\",\n  appId: \"1:509021124659:web:0417a738f6ba7da281cb46\",\n  measurementId: \"G-ES37CJT3ZG\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //const userRef = firestore.doc(`users/45454dfdf5dfdfd`);\n  //console.log (userRef);\n  //const collectionRef = firestore.collection('users');\n  //console.log(collectionRef);\n\n  const snapShot = await userRef.get(); //console.log ({snapShot});\n  //const CollectionSnapShot = await collectionRef.get();\n  //console.log ({ collection : CollectionSnapShot.docs.map(doc=>doc.data())});\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionkey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionkey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n    console.log(newDocRef);\n  }); //show the results\n\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/drh/clothingv3.0/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionkey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","googleProvider","GoogleAuthProvider","provider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDMkhuFQxRYLe41Qv-LG0RP454ssnxwVm0\",\r\n  authDomain: \"crown-98d7f.firebaseapp.com\",\r\n  databaseURL: \"https://crown-98d7f.firebaseio.com\",\r\n  projectId: \"crown-98d7f\",\r\n  storageBucket: \"crown-98d7f.appspot.com\",\r\n  messagingSenderId: \"509021124659\",\r\n  appId: \"1:509021124659:web:0417a738f6ba7da281cb46\",\r\n  measurementId: \"G-ES37CJT3ZG\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  //const userRef = firestore.doc(`users/45454dfdf5dfdfd`);\r\n  //console.log (userRef);\r\n\r\n  //const collectionRef = firestore.collection('users');\r\n  //console.log(collectionRef);\r\n\r\n  const snapShot = await userRef.get();\r\n  //console.log ({snapShot});\r\n\r\n  //const CollectionSnapShot = await collectionRef.get();\r\n  //console.log ({ collection : CollectionSnapShot.docs.map(doc=>doc.data())});\r\n \r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating user', error.message);\r\n    }\r\n  } \r\n\r\n  return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (collectionkey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionkey);\r\n  console.log(collectionRef);\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef,obj);\r\n\r\n    console.log(newDocRef);\r\n    \r\n  });\r\n  //show the results\r\n\r\n  return await batch.commit();\r\n}\r\n \r\nexport const convertCollectionsSnapshotToMap = (collections)=>{\r\n\r\n  const transformedCollection = collections.docs.map(doc=>{\r\n    const {title, items} =doc.data();\r\n\r\n    return {\r\n      routeName : encodeURI(title.toLowerCase()),\r\n      id        : doc.id,\r\n      title,\r\n      items\r\n\r\n    }\r\n  });\r\n\r\n  return  transformedCollection.reduce((accumulator,collection)=>{\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return  accumulator;\r\n  },{});\r\n\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}